// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";

function spriteParams(bboxOffsetOpt, bboxSizeOpt, frameSizeOpt, maxTicksOpt, maxFramesOpt, srcOffset, png) {
  var bboxOffset = bboxOffsetOpt !== undefined ? bboxOffsetOpt : [
      0,
      0
    ];
  var bboxSize = bboxSizeOpt !== undefined ? bboxSizeOpt : [
      0,
      0
    ];
  var frameSize = frameSizeOpt !== undefined ? frameSizeOpt : [
      16,
      16
    ];
  var maxTicks = maxTicksOpt !== undefined ? maxTicksOpt : 0;
  var maxFrames = maxFramesOpt !== undefined ? maxFramesOpt : 1;
  var bboxSize$1 = Caml_obj.caml_equal(bboxSize, [
        0,
        0
      ]) ? frameSize : bboxSize;
  var maxFrames$1 = maxFrames < 1 ? 1 : maxFrames;
  return {
          maxFrames: maxFrames$1,
          maxTicks: maxTicks,
          png: png,
          frameSize: frameSize,
          srcOffset: srcOffset,
          bboxOffset: bboxOffset,
          bboxSize: bboxSize$1
        };
}

function smallPlayerParams(typ, dir, playerNum) {
  var png = playerNum ? /* Mario2Small */7 : /* MarioSmall */6;
  if (dir) {
    switch (typ) {
      case /* Standing */0 :
          return spriteParams([
                      1,
                      1
                    ], [
                      11,
                      15
                    ], undefined, undefined, undefined, [
                      0,
                      32
                    ], png);
      case /* Jumping */1 :
          return spriteParams([
                      2,
                      1
                    ], [
                      13,
                      15
                    ], undefined, 10, 2, [
                      16,
                      48
                    ], png);
      case /* Running */2 :
          return spriteParams([
                      2,
                      1
                    ], [
                      12,
                      15
                    ], undefined, 5, 3, [
                      16,
                      32
                    ], png);
      case /* Crouching */3 :
          return spriteParams([
                      1,
                      5
                    ], [
                      14,
                      10
                    ], undefined, undefined, undefined, [
                      0,
                      64
                    ], png);
      
    }
  } else {
    switch (typ) {
      case /* Standing */0 :
          return spriteParams([
                      3,
                      1
                    ], [
                      11,
                      15
                    ], undefined, undefined, undefined, [
                      0,
                      0
                    ], png);
      case /* Jumping */1 :
          return spriteParams([
                      2,
                      1
                    ], [
                      13,
                      15
                    ], undefined, 10, 2, [
                      16,
                      16
                    ], png);
      case /* Running */2 :
          return spriteParams([
                      2,
                      1
                    ], [
                      12,
                      15
                    ], undefined, 5, 3, [
                      16,
                      0
                    ], png);
      case /* Crouching */3 :
          return spriteParams([
                      1,
                      5
                    ], [
                      14,
                      10
                    ], undefined, undefined, undefined, [
                      0,
                      64
                    ], png);
      
    }
  }
}

function bigPlayerParams(playerTyp, dir, playerNum) {
  var png = playerNum ? /* Mario2Big */9 : /* MarioBig */8;
  if (dir) {
    switch (playerTyp) {
      case /* Standing */0 :
          return spriteParams([
                      1,
                      1
                    ], [
                      13,
                      25
                    ], [
                      16,
                      26
                    ], undefined, undefined, [
                      16,
                      69
                    ], png);
      case /* Jumping */1 :
          return spriteParams([
                      2,
                      1
                    ], [
                      12,
                      25
                    ], [
                      16,
                      26
                    ], undefined, undefined, [
                      48,
                      70
                    ], png);
      case /* Running */2 :
          return spriteParams([
                      2,
                      1
                    ], [
                      13,
                      25
                    ], [
                      16,
                      27
                    ], 10, 4, [
                      0,
                      101
                    ], png);
      case /* Crouching */3 :
          return spriteParams([
                      2,
                      10
                    ], [
                      13,
                      17
                    ], [
                      16,
                      27
                    ], undefined, undefined, [
                      32,
                      69
                    ], png);
      
    }
  } else {
    switch (playerTyp) {
      case /* Standing */0 :
          return spriteParams([
                      2,
                      1
                    ], [
                      13,
                      25
                    ], [
                      16,
                      27
                    ], undefined, undefined, [
                      16,
                      5
                    ], png);
      case /* Jumping */1 :
          return spriteParams([
                      2,
                      1
                    ], [
                      12,
                      25
                    ], [
                      16,
                      26
                    ], undefined, undefined, [
                      48,
                      6
                    ], png);
      case /* Running */2 :
          return spriteParams([
                      2,
                      1
                    ], [
                      13,
                      25
                    ], [
                      16,
                      27
                    ], 10, 4, [
                      0,
                      37
                    ], png);
      case /* Crouching */3 :
          return spriteParams([
                      2,
                      10
                    ], [
                      13,
                      17
                    ], [
                      16,
                      27
                    ], undefined, undefined, [
                      32,
                      5
                    ], png);
      
    }
  }
}

function enemyParams(typ, dir) {
  switch (typ) {
    case /* Goomba */0 :
        return spriteParams([
                    1,
                    1
                  ], [
                    14,
                    14
                  ], undefined, 10, 2, [
                    0,
                    128
                  ], /* Enemies */3);
    case /* GKoopa */1 :
        if (dir) {
          return spriteParams([
                      1,
                      10
                    ], [
                      11,
                      16
                    ], [
                      16,
                      27
                    ], 10, 2, [
                      32,
                      69
                    ], /* Enemies */3);
        } else {
          return spriteParams([
                      4,
                      10
                    ], [
                      11,
                      16
                    ], [
                      16,
                      27
                    ], 10, 2, [
                      0,
                      69
                    ], /* Enemies */3);
        }
    case /* RKoopa */2 :
        if (dir) {
          return spriteParams([
                      1,
                      10
                    ], [
                      11,
                      16
                    ], [
                      16,
                      27
                    ], 10, 2, [
                      32,
                      5
                    ], /* Enemies */3);
        } else {
          return spriteParams([
                      4,
                      10
                    ], [
                      11,
                      16
                    ], [
                      16,
                      27
                    ], 10, 2, [
                      0,
                      5
                    ], /* Enemies */3);
        }
    case /* GKoopaShell */3 :
        return spriteParams([
                    2,
                    2
                  ], [
                    12,
                    13
                  ], undefined, 10, 4, [
                    0,
                    96
                  ], /* Enemies */3);
    case /* RKoopaShell */4 :
        return spriteParams([
                    2,
                    2
                  ], [
                    12,
                    13
                  ], undefined, 10, 4, [
                    0,
                    32
                  ], /* Enemies */3);
    
  }
}

function makeParams(x) {
  if (x) {
    return spriteParams([
                3,
                0
              ], [
                12,
                16
              ], undefined, 15, 3, [
                0,
                80
              ], /* Items */5);
  } else {
    return spriteParams([
                2,
                0
              ], [
                12,
                16
              ], undefined, undefined, undefined, [
                0,
                0
              ], /* Items */5);
  }
}

var brickParams = spriteParams(undefined, undefined, undefined, 10, 5, [
      0,
      0
    ], /* Blocks */1);

var qBlockParams = spriteParams(undefined, undefined, undefined, 15, 4, [
      0,
      16
    ], /* Blocks */1);

var qBlockUsedParams = spriteParams(undefined, undefined, undefined, undefined, undefined, [
      0,
      32
    ], /* Blocks */1);

var unBBlockParams = spriteParams(undefined, undefined, undefined, undefined, undefined, [
      0,
      48
    ], /* Blocks */1);

var cloudParams = spriteParams(undefined, undefined, undefined, undefined, undefined, [
      0,
      64
    ], /* Blocks */1);

var panelParams = spriteParams(undefined, undefined, [
      26,
      26
    ], 15, 3, [
      0,
      0
    ], /* Panel */10);

var groundParams = spriteParams(undefined, undefined, undefined, undefined, undefined, [
      0,
      32
    ], /* Ground */4);

function blockParams(x) {
  switch (x) {
    case /* QBlockMushroom */0 :
    case /* QBlockCoin */1 :
        return qBlockParams;
    case /* QBlockUsed */2 :
        return qBlockUsedParams;
    case /* Brick */3 :
        return brickParams;
    case /* UnBBlock */4 :
        return unBBlockParams;
    case /* Cloud */5 :
        return cloudParams;
    case /* Panel */6 :
        return panelParams;
    case /* Ground */7 :
        return groundParams;
    
  }
}

function particleParams(x) {
  switch (x) {
    case /* GoombaSquish */0 :
        return spriteParams(undefined, undefined, undefined, undefined, undefined, [
                    0,
                    144
                  ], /* Enemies */3);
    case /* BrickChunkL */1 :
        return spriteParams(undefined, undefined, [
                    8,
                    8
                  ], undefined, undefined, [
                    0,
                    0
                  ], /* Chunks */2);
    case /* BrickChunkR */2 :
        return spriteParams(undefined, undefined, [
                    8,
                    8
                  ], undefined, undefined, [
                    8,
                    0
                  ], /* Chunks */2);
    case /* Score100 */3 :
        return spriteParams(undefined, undefined, [
                    12,
                    8
                  ], undefined, undefined, [
                    0,
                    0
                  ], /* Score */11);
    case /* Score200 */4 :
        return spriteParams(undefined, undefined, [
                    12,
                    9
                  ], undefined, undefined, [
                    0,
                    9
                  ], /* Score */11);
    case /* Score400 */5 :
        return spriteParams(undefined, undefined, [
                    12,
                    9
                  ], undefined, undefined, [
                    0,
                    18
                  ], /* Score */11);
    case /* Score800 */6 :
        return spriteParams(undefined, undefined, [
                    12,
                    9
                  ], undefined, undefined, [
                    0,
                    27
                  ], /* Score */11);
    case /* Score1000 */7 :
        return spriteParams(undefined, undefined, [
                    14,
                    9
                  ], undefined, undefined, [
                    13,
                    0
                  ], /* Score */11);
    case /* Score2000 */8 :
        return spriteParams(undefined, undefined, [
                    14,
                    9
                  ], undefined, undefined, [
                    13,
                    9
                  ], /* Score */11);
    case /* Score4000 */9 :
        return spriteParams(undefined, undefined, [
                    14,
                    9
                  ], undefined, undefined, [
                    13,
                    18
                  ], /* Score */11);
    case /* Score8000 */10 :
        return spriteParams(undefined, undefined, [
                    14,
                    9
                  ], undefined, undefined, [
                    13,
                    27
                  ], /* Score */11);
    
  }
}

function playerParams(plSize, typ, dir, playerNum) {
  if (plSize) {
    return smallPlayerParams(typ, dir, playerNum);
  } else {
    return bigPlayerParams(typ, dir, playerNum);
  }
}

function makeFromParams(params) {
  return {
          params: params,
          frame: 0,
          ticks: 0
        };
}

function makeBgd(param) {
  return {
          params: spriteParams(undefined, undefined, [
                512,
                256
              ], undefined, undefined, [
                0,
                0
              ], /* Bgd1 */0),
          frame: 0,
          ticks: 0
        };
}

function makeParticle(ptyp) {
  return {
          params: particleParams(ptyp),
          frame: 0,
          ticks: 0
        };
}

function transformEnemy(enemy_typ, sprite, dir) {
  var params = enemyParams(enemy_typ, dir);
  sprite.params = params;
  
}

function updateAnimation(sprite) {
  var curr_ticks = sprite.ticks;
  if (curr_ticks >= sprite.params.maxTicks) {
    sprite.ticks = 0;
    sprite.frame = Caml_int32.mod_(sprite.frame + 1 | 0, sprite.params.maxFrames);
  } else {
    sprite.ticks = curr_ticks + 1 | 0;
  }
  
}

export {
  spriteParams ,
  smallPlayerParams ,
  bigPlayerParams ,
  enemyParams ,
  makeParams ,
  brickParams ,
  qBlockParams ,
  qBlockUsedParams ,
  unBBlockParams ,
  cloudParams ,
  panelParams ,
  groundParams ,
  blockParams ,
  particleParams ,
  playerParams ,
  makeFromParams ,
  makeBgd ,
  makeParticle ,
  transformEnemy ,
  updateAnimation ,
  
}
/* brickParams Not a pure module */
