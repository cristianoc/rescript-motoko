// Generated by ReScript, PLEASE EDIT WITH CARE


function fromCandid(raw) {
  if (raw.Leaf !== undefined) {
    return {
            TAG: /* Leaf */0,
            _0: raw.Leaf
          };
  }
  var match = raw.Node;
  return {
          TAG: /* Node */1,
          _0: fromCandid(match[0]),
          _1: fromCandid(match[1])
        };
}

function toCandid(t) {
  if (t.TAG === /* Leaf */0) {
    return {
            Leaf: t._0
          };
  } else {
    return {
            Node: [
              toCandid(t._0),
              toCandid(t._1)
            ]
          };
  }
}

var Tree = {
  fromCandid: fromCandid,
  toCandid: toCandid
};

var Actor = {};

function fromActor(actor) {
  return {
          extend: (function (param) {
              return actor.extend();
            }),
          get: (function (param) {
              return actor.get().then(fromCandid);
            }),
          set: (function (t) {
              return actor.set(toCandid(t));
            }),
          someTree: (function (param) {
              return actor.someTree().then(function (raw) {
                          return Promise.resolve(fromCandid(raw));
                        });
            }),
          reverseInPlace: (function (param) {
              return actor.reverseInPlace();
            })
        };
}

var Service = {
  fromActor: fromActor
};

export {
  Tree ,
  Actor ,
  Service ,
  
}
/* No side effect */
